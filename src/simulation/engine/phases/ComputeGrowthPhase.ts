/**
 * ComputeGrowthPhase (5.0)
 *
 * Applies Moore's Law and algorithmic improvements to compute infrastructure.
 * This must run BEFORE allocation so efficiency multipliers are applied.
 *
 * **EXECUTION ORDER:** 5.0 (Very early, first in simulation step)
 * **DEPENDENCIES:** Requires compute infrastructure
 * **SIDE EFFECTS:**
 * - Updates compute efficiency multipliers
 * - Applies algorithmic progress
 */

import { SimulationPhase, PhaseResult } from '../PhaseOrchestrator';
import { GameState } from '@/types/game';
import { RNGFunction } from '@/types/rng';

export class ComputeGrowthPhase implements SimulationPhase {
  readonly id = 'compute-growth';
  readonly name = 'Compute Growth (Moore\'s Law)';
  readonly order = 1.0;

  execute(state: GameState, rng: RNGFunction): PhaseResult {
    // Import and execute compute growth
    const { applyComputeGrowth } = require('../../computeInfrastructure');

    applyComputeGrowth(state, rng);

    // No events generated by growth
    return { events: [] };
  }
}
